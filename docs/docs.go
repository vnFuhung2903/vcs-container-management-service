// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/containers/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a container with name and image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Create a new container",
                "parameters": [
                    {
                        "description": "Container creation request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Container created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/containers/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a container by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Delete a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/containers/export": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Export containers with optional filters and sorting to an Excel file",
                "produces": [
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Export containers to Excel",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "From index (default 1)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "To index (default -1 for all)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by ContainerId",
                        "name": "container_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by ContainerName",
                        "name": "container_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ON",
                            "OFF"
                        ],
                        "type": "string",
                        "description": "Filter by Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IPv4",
                        "name": "ipv4",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "container_id",
                            "container_name",
                            "status",
                            "ipv4",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "description": "Sort by field",
                        "name": "field",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file containing container data",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/containers/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Import containers using an Excel (.xlsx) file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Import containers from Excel",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Excel file containing container data",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import result with success and failure counts",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/containers/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update container information by container ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Update a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Container update payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ContainerUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/containers/view": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of containers with optional pagination, filtering, and sorting",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "View containers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "From index (default 1)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "To index (default -1 for all)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by ContainerId",
                        "name": "container_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by ContainerName",
                        "name": "container_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ON",
                            "OFF"
                        ],
                        "type": "string",
                        "description": "Filter by Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IPv4",
                        "name": "ipv4",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "container_id",
                            "container_name",
                            "status",
                            "ipv4",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "description": "Sort by field",
                        "name": "field",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with container list",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ContainerUpdate": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "enum": [
                        "ON",
                        "OFF"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.ContainerStatus"
                        }
                    ]
                }
            }
        },
        "dto.CreateRequest": {
            "type": "object",
            "required": [
                "container_name",
                "image_name"
            ],
            "properties": {
                "container_name": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                }
            }
        },
        "entities.ContainerStatus": {
            "type": "string",
            "enum": [
                "ON",
                "OFF"
            ],
            "x-enum-varnames": [
                "ContainerOn",
                "ContainerOff"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "VCS SMS API",
	Description:      "Container Management System API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
