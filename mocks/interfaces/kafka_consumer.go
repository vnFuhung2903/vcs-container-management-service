// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/kafka_consumer.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockIKafkaConsumer is a mock of IKafkaConsumer interface.
type MockIKafkaConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaConsumerMockRecorder
}

// MockIKafkaConsumerMockRecorder is the mock recorder for MockIKafkaConsumer.
type MockIKafkaConsumerMockRecorder struct {
	mock *MockIKafkaConsumer
}

// NewMockIKafkaConsumer creates a new mock instance.
func NewMockIKafkaConsumer(ctrl *gomock.Controller) *MockIKafkaConsumer {
	mock := &MockIKafkaConsumer{ctrl: ctrl}
	mock.recorder = &MockIKafkaConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafkaConsumer) EXPECT() *MockIKafkaConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockIKafkaConsumer) Consume(ctx context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockIKafkaConsumerMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockIKafkaConsumer)(nil).Consume), ctx)
}
